n = TRANSFER_SIZE

Data is transmitted in 32-bit frames. The first frame is a header specifying
special control parameters and the device to which it is addressed. Since all
devices share a single communication channel, the ID is required for control.
Following the header are TRANSFER_SIZE-1 number of data packets, each describing
a point and colour. The receiver will parse points from the first until the
point count value transferred, maxing at TRANSFER_SIZE-1.

The total transfer then consists of TRANSFER_SIZE * 32 bits. These can be
transmitted in packets of any size, typically 8 with standard settings, as long
as there is a complete transmission, otherwise the packets will be discarded on
next transmission.

When the configuration bit is set, commands instead take the structure of the
configure mode frames. Following a configuration transfer, if the TRANSER_SIZE
has been modified, all future transmissions following the next reset will need
to use the new value.

When updating ID, note that all projectors initialize at ID 0. This method thus
is meant to update from this intial value. Similarly, ID 0xF is a special case
meant to address all projectors.

The draw boundary directive will cause the projector to enter a drawing mode
that slowly draws the boundary from the home value to MAX_X or MAX_Y. This draw
loop will be exited upon the next legal drawing transmission, including future
draw boundary calls.

Note that when initiating configuration mode the only bits acknoweldged in the
header are the ID, Configuration Mode, and the Checksum.

For all config values, if you do not wish to write an update to the current
saved value, simply send all 1's, and that config component will be ignored.

Frame # | Bits & Definition

Header Mode (32bit packet):
0       | 0xF0000000 = Projector ID (Projectors reserve addresses 0x0 - 0x9, 0xF is reserved to index all projectors)
        | 0x0FF00000 = Point Count
        | 0x00040000 = Enable
        | 0x00080000 = Home
        | 0x00020000 = Configuration Mode
        | 0x00010000 = Draw Boundary
        | 0x00008000 = Oneshot
        | 0x00007000 = Speed Profile
        | 0x00000001 = Checksum

Pattern Selection (32bit packet):
1       | 0xFF000000 = Pattern ID (Selected from pattern lookup array)
        | 0x00FF8000 = Colour Mask (3bit Red 3bit Green 3bit Blue)
        | 0x00000001 = Checksum

When Sending DMX data, we send 8 8bit packets. The beggining of each stream we identify the addressed controller and selected DMX universe.
As long as this header remains the same, we continue to add to the already selected DMX channel list. Ex:

        0xA0 0x10 0x10 0x10 0x10 0x10 0x10 0x10 | Writes 0x10 to DMX channels 0-6 in universe 0
        0xA0 0x20 0x20 0x20 0x20 0x20 0x20 0x20 | Writes 0x20 to DMX channels 7-14 in universe 0
        0xA1 0x10 0x10 0x10 0x10 0x10 0x10 0x10 | Writes 0x10 to DMX channels 0-6 in universe 1

DMX Header Mode(8bit packet):
0       | 0xF0       = Controller ID (DMX Controllers reserve addresses 0xA-0xE)
        | 0x0F       = Universe Selector (Using a MUX, we extend the number of addressable DMX devices)

DMX Data (8bit packet):
1 -> 7  | 0xFF       = DMX channel data (No special format here, just forward whatever DMX data is needed for the channel)

// Deprecated
Draw Mode:
1 -> n  | 0xFF800000 = X coordinate
        | 0x007FC000 = Y coordinate
        | 0x00003800 = Red 3-bit colour
        | 0x00000700 = Green 3-bit colour
        | 0x000000E0 = Blue 3-bit colour
        | 0x00000001 = Checksum

Configure Mode:
1       | 0xFFFFF000 = Acceleration (0 - 1048574)
        | 0x00000FFE = Transfer Size (0 - 2046)
        | 0x00000001 = Checksum
2       | 0xFFFFC000 = Max Speed (0 - 262142)
        | 0x00003FFE = Min Speed (0 - 16382)
        | 0x00000001 = Checksum
3       | 0xFFF00000 = X Home Pos (0 - 4094)
        | 0x000FFF00 = Y Home Pos (0 - 4094)
        | 0x000000F0 = Projector ID (0 - 14)
        | 0x00000001 = Checksum
4 -> n  | 0x00000000